#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# ############################################################################
#
# mtn.py
# 04/17/2020 (c) Juan M. Casillas <juanm.casillas@gmail.com>
#
# calculate the MNT sheet for a given point, in lat lon
#
# https://www.mitma.gob.es/recursos_mfom/nuevcar.pdf
#
# (lon, lat)
# λο= - 9º 51’ 15”00 φο= 44º 00’ 00”00 Datum ETRS89 
#
# ∆λ= 20’ e ∆ϕ= -10’ para MTN50, 
# ∆λ= 10’ e ∆ϕ= -5’ para MTN25,
# ∆λ= 5’ e ∆ϕ= -2’ 30” para MTN10 
#
# Ejemplo: Cual será la esquina SE de la hoja MTN50 h559 <> 1922 (Cc=19 Ff=22)
# Longitud = - 9º 51’ 15” + (19/3)º = -3.520833333.. = -3º 31’ 15”
# Latitud =   44º 00’ 00” – (22/6)º  = 40.33333333...= 40º 20’ 00”
# Las restantes esquinas:
# SW -3º 51’ 15” NW -3º 51’ 15” NE -3º 31’ 15”
#    40º 20’ 00”    40º 30’ 00”    40º 30’ 00”
# En resumen, sabiendo el número de hoja CcFf, basta con sumar al “punto origen de
# numeración” lo siguiente para obtener la esquina SE y, a partir de ésta las restantes:
# MTN50 λ=λο+(Cc/3)º, ϕ= ϕο−(Ff/6)º
# MTN25 λ=λο+(Cc/6)º, ϕ= ϕο−(Ff/12)º
# MTN10 λ=λο+(Cc/12)º, ϕ= ϕο−(Ff/24)º 
#
# Sean las coordenadas de un punto P (ϕ, λ) y las del origen para la cuenta del número de
# la hoja Po (ϕο, λο), expresadas todas en grados sexagesimales y decimal de grado.
# Se supone que la función ENTERO da sólo la parte entera sin forzar o lo que es lo
# mismo el entero más próximo a cero, en cuyo caso se empleará la función oportuna (por
# ejemplo FIX u otras). 
#
# o CcFf (MTN50)=(ENTERO((λ −λο)*3)+1)*100+ENTERO((ϕο −ϕ)*6)+1
#     como la hoja es de 20’ x 10’ los factores son
#     60’/20’=3 por grado y 60’/10’=6 por grado
# o CcFf (MTN25)=(ENTERO((λ −λο)*6)+1)*100+ENTERO((ϕο −ϕ)*12)+1
#     como la hoja es de 10’ x 5’ los factores son
#     60’/10’=6 por grado y 60’/5’=12 por grado
# o CccFff (MTN10)=(ENTERO((λ −λο)*12)+1)*1000+ENTERO((ϕο −ϕ)*24) +1
#     como la hoja es de 5’ x 2.5’ los factores son
#     60’/5’=12 por grado y 60’/2.5’=24 por grado 
#
# Ejemplo
#
# ¿ Dónde se encuentra el punto ϕ=40º 22’ 25”00 λ=-(3º 29’ 06”32) ?
#
# Columna  λ −λο =-(3º 29’ 06”32) – (-9º 31’ 15”) = 6º 22’ 08”68 = 6º36907777..
# Fila     ϕο −ϕ = 44º 00’ 00” – 40º 22’ 25”00    = 3º 37’ 35”00 = 3º62638888..
#
# MTN50 ent(6º369077*3)+1= 20 ent(3º626388*6)+1 = 22 2022 (tabla) h560
#
# Los valores Cc Ff (columna fila) hallados para MTN50 servirán para dilucidar el
# cuarto de MTN25 o la correspondiente columna fila del MTN10
#
# MTN25 ent(6º369077*6)+1= 39 ent(3º626388*12)+1 = 44 3944 idem h560 - ?
#     39-20*2 = -1 es decir cuarto (I o III)
#     44-22*2 = 0  es decir cuarto (III o IV) -----------------> h560-III
#
# MTN10 ent(6º369077*12)+1=77 ent(3º626388*24)+1=88 077088 idem h560 - ?
#     77-20*4=-3 es decir col 1 (-3+4)
#     88-22*4= 0 es decir fil 4 (0+4) -------------------------> h560-14 
#
# this correction found in a file set the right origin for the grid
#
# Las coordenadas geodésicas ETRS89 de dicho origen corresponden a una longitud 
# de -9º 51' 15'' y una latitud de 44º 00' 00''. Quedando definida la esquina sureste con 
# longitud -9º 51' 15'' + (CC/3)º y latitud 44º 00' 00'' -(FF/6)º, y la esquina noroeste restando 20' 
# para la longitud y sumando 10' para la latitud. Las otras dos esquinas se obtienen a partir de éstas.
# EJEMPLO: Cálculo de la esquina Sureste de la hoja MTN50 n.º 559, correspondiente a la columna-fila 19-22 (CC=19, FF=22). 
# Longitud = -9º 51' 15'' + (19/3)º = -3,520833333= -3º 31' 15'' Latitud = 44º 00' 00'' -(22/6)º = 40,33333333 = 40º 20' 00''. 

# Some dms / dd examples
#
# Datum:	ETRS89
# Latitud:	43º 46' 7,01" N
# Longitud:	8º 0' 2,86" W
# Huso UTM:	29
# Coord. X:	580 421,36
# Coord. Y:	4 846 659,01
# Altura (m):	0
#
# Datum:	ETRS89
# Latitud:	43,7686146007
# Longitud:	-8,0007934570
# Huso UTM:	29
# Coord. X:	580 421,36
# Coord. Y:	4 846 659,01
# Altura (m):	0
#
# ############################################################################

import re
import sys
from xml.dom import minidom
import argparse

from raster import Bounds

class MTN:
    """calculates the MTN sheet for the given lat, lon pair or bounds
    """

    #  
    # this origin is set in the doc, but later changes in the
    # same doc. The working one is th set
    #
    # origin MNT grid λ (lon)= - 9º 31’ 15” φ (lat)= 43º 50’ 00”
    # origin_dms = ('''9º 31' 15" W''', '''43º 50' 00" N''')
    # origin.lon = -9.520833333333334
    # origin.lat = 43.833333333333336
    #

    origin_dms = ('''9º 51' 15" W''', '''44º 00' 00" N''')
    origin = type('', (), {})
    origin.lon =-9.854166666666666
    origin.lat = 44.0

    # map from CC (col) FF (fila) to MTN sheet (from the document)
    mtn_from_ccff = { 
        602: 1, 2707: 117, 811: 227, 1014: 337, 3517: 447, 2122: 561, 4026: 672, 1831: 784, 
        1136: 897, 1941: 1009, 702: 2, 2807: 118, 911: 228, 1114: 338, 3617: 448, 2222: 562, 
        4326: 673, 1931: 785, 1236: 898, 2041: 1010, 802: 3, 308: 119, 1011: 229, 1214: 339, 
        1018: 449, 2322: 563, 727: 674, 2031: 786, 1336: 899, 2141: 1011, 503: 6, 408: 120, 
        1111: 230, 1314: 340, 1118: 450, 2422: 564, 827: 675, 2131: 787, 1436: 900, 2241: 1012, 
        603: 7, 508: 121, 1211: 231, 1414: 341, 1218: 451, 2522: 565, 927: 676, 2231: 788, 1536: 901, 
        2341: 1013, 703: 8, 608: 122, 1311: 232, 1514: 342, 1318: 452, 2622: 566, 1027: 677, 2331: 789,
        1636: 902, 2441: 1014, 803: 9, 708: 123, 1411: 233, 1614: 343, 1418: 453, 2722: 567, 1127: 678, 
        2431: 790, 1736: 903, 2541: 1015, 903: 10, 808: 124, 1511: 234, 1714: 344, 1518: 454, 2822: 568, 
        1227: 679, 2531: 791, 1836: 904, 942: 1016, 1003: 11, 908: 125, 1611: 235, 1814: 345, 1618: 455, 
        2922: 569, 1327: 680, 2631: 792, 1936: 905, 1042: 1017, 1103: 12, 1008: 126, 1711: 236, 1914: 346, 
        1718: 456, 3022: 570, 1427: 681, 2731: 793, 2036: 906, 1142: 1018, 1203: 13, 1108: 127, 1811: 237, 
        2014: 347, 1818: 457, 3122: 571, 1527: 682, 2831: 794, 2136: 907, 1242: 1019, 1303: 14, 1208: 128,
        1911: 238, 2114: 348, 1918: 458, 923: 572, 1627: 683, 2931: 795, 2236: 908, 1342: 1020, 1403: 15, 
        1308: 129, 2011: 239, 2214: 349, 2018: 459, 1023: 573, 1727: 684, 3031: 796, 2336: 909, 1442: 1021, 
        1903: 18, 1408: 130, 2111: 240, 2314: 350, 2118: 460, 1123: 574, 1827: 685, 3431: 798, 2436: 910, 
        1542: 1022, 404: 20, 1508: 131, 2211: 241, 2414: 351, 2218: 461, 1223: 575, 1927: 686, 3531: 799, 
        2536: 911, 1642: 1023, 504: 21, 1608: 132, 2311: 242, 2514: 352, 2318: 462, 1323: 576, 2027: 687, 
        832: 800, 2636: 912, 1742: 1024, 604: 22, 1708: 133, 2411: 243, 2614: 353, 2418: 463, 1423: 577, 
        2127: 688, 932: 801, 2736: 913, 1842: 1025, 704: 23, 1808: 134, 2511: 244, 2714: 354, 2518: 464, 
        1523: 578, 2227: 689, 1032: 802, 2836: 914, 1942: 1026, 804: 24, 1908: 135, 2611: 245, 2814: 355, 
        2618: 465, 1623: 579, 2327: 690, 1132: 803, 837: 915, 2042: 1027, 904: 25, 2008: 136, 2711: 246, 
        2914: 356, 2718: 466, 1723: 580, 2427: 691, 1232: 804, 937: 916, 2142: 1028, 1004: 26, 2108: 137, 
        2811: 247, 3014: 357, 2818: 467, 1823: 581, 2527: 692, 1332: 805, 1037: 917, 2242: 1029, 1104: 27, 
        2208: 138, 2911: 248, 3114: 358, 2918: 468, 1923: 582, 2627: 693, 1432: 806, 1137: 918, 2342: 1030, 
        1204: 28, 2308: 139, 3011: 249, 3214: 359, 3018: 469, 2023: 583, 2727: 694, 1532: 807, 1237: 919, 
        2442: 1031, 1304: 29, 2408: 140, 3111: 250, 3314: 360, 3118: 470, 2123: 584, 2827: 695, 1632: 808, 
        1337: 920, 2542: 1032, 1404: 30, 2508: 141, 3211: 251, 3414: 361, 3218: 471, 2223: 585, 2927: 696, 
        1732: 809, 1437: 921, 1143: 1033, 1504: 31, 2608: 142, 3311: 252, 3514: 362, 3318: 472, 2323: 586, 
        3727: 697, 1832: 810, 1537: 922, 1243: 1034, 1604: 32, 2708: 143, 3411: 253, 3614: 363, 3418: 473, 
        2423: 587, 3827: 698, 1932: 811, 1637: 923, 1343: 1035, 1704: 33, 2808: 144, 3511: 254, 3714: 364, 
        919: 474, 2523: 588, 3927: 699, 2032: 812, 1737: 924, 1443: 1036, 1804: 34, 2908: 145, 3611: 255, 
        3814: 365, 1019: 475, 2623: 589, 4027: 700, 2132: 813, 1837: 925, 1543: 1037, 1904: 35, 3008: 146, 
        3711: 256, 3914: 366, 1119: 476, 2723: 590, 828: 701, 2232: 814, 1937: 926, 1643: 1038, 2004: 36, 
        3108: 147, 3811: 257, 1115: 367, 1219: 477, 2823: 591, 928: 702, 2332: 815, 2037: 927, 1743: 1039, 
        2104: 37, 3208: 148, 3911: 258, 1215: 368, 1319: 478, 2923: 592, 1028: 703, 2432: 816, 2137: 928, 
        1843: 1040, 2204: 38, 3308: 149, 4011: 259, 1315: 369, 1419: 479, 3023: 593, 1128: 704, 2532: 817, 
        2237: 929, 1943: 1041, 2304: 39, 3408: 150, 312: 260, 1415: 370, 1519: 480, 3123: 594, 1228: 705, 
        2632: 818, 2337: 930, 2043: 1042, 2404: 40, 309: 151, 412: 261, 1515: 371, 1619: 481, 924: 595, 
        1328: 706, 2732: 819, 2437: 931, 2143: 1043, 2504: 41, 409: 152, 512: 262, 1615: 372, 1719: 482, 
        1024: 596, 1428: 707, 2832: 820, 2537: 932, 2243: 1044, 305: 43, 509: 153, 612: 263, 1715: 373, 
        1819: 483, 1124: 597, 1528: 708, 2932: 821, 2637: 933, 2343: 1045, 405: 44, 609: 154, 712: 264, 
        1815: 374, 1919: 484, 1224: 598, 1628: 709, 3032: 822, 2737: 934, 2443: 1046, 505: 45, 709: 155, 
        812: 265, 1915: 375, 2019: 485, 1324: 599, 1728: 710, 3132: 823, 2837: 935, 1144: 1047, 605: 46, 
        809: 156, 912: 266, 2015: 376, 2119: 486, 1424: 600, 1828: 711, 3432: 824, 838: 936, 1244: 1048, 
        705: 47, 909: 157, 1012: 267, 2115: 377, 2219: 487, 1524: 601, 1928: 712, 3532: 825, 938: 937, 
        1344: 1049, 805: 48, 1009: 158, 1112: 268, 2215: 378, 2319: 488, 1624: 602, 2028: 713, 833: 826, 
        1038: 938, 1444: 1050, 905: 49, 1109: 159, 1212: 269, 2315: 379, 2419: 489, 1724: 603, 2128: 714,
        933: 827, 1138: 939, 1544: 1051, 1005: 50, 1209: 160, 1312: 270, 2415: 380, 2519: 490, 1824: 604, 
        2228: 715, 1033: 828, 1238: 940, 1644: 1052, 1105: 51, 1309: 161, 1412: 271, 2515: 381, 2619: 491, 
        1924: 605, 2328: 716, 1133: 829, 1338: 941, 1744: 1053, 1205: 52, 1409: 162, 1512: 272, 2615: 382, 
        2719: 492, 2024: 606, 2428: 717, 1233: 830, 1438: 942, 1844: 1054, 1305: 53, 1509: 163, 1612: 273, 
        2715: 383, 2819: 493, 2124: 607, 2528: 718, 1333: 831, 1538: 943, 1944: 1055, 1405: 54, 1609: 164, 
        1712: 274, 2815: 384, 2919: 494, 2224: 608, 2628: 719, 1433: 832, 1638: 944, 2044: 1056, 1505: 55, 
        1709: 165, 1812: 275, 2915: 385, 3019: 495, 2324: 609, 2728: 720, 1533: 833, 1738: 945, 2144: 1057, 
        1605: 56, 1809: 166, 1912: 276, 3015: 386, 3119: 496, 2424: 610, 2828: 721, 1633: 834, 1838: 946, 
        2244: 1058, 1705: 57, 1909: 167, 2012: 277, 3115: 387, 3219: 497, 2524: 611, 2928: 722, 1733: 835, 
        1938: 947, 2344: 1059, 1805: 58, 2009: 168, 2112: 278, 3215: 388, 3319: 498, 2624: 612, 3828: 723, 
        1833: 836, 2038: 948, 2444: 1060, 1905: 59, 2109: 169, 2212: 279, 3315: 389, 1020: 500, 2724: 613, 
        3928: 724, 1933: 837, 2138: 949, 1145: 1061, 2005: 60, 2209: 170, 2312: 280, 3415: 390, 1120: 501, 
        2824: 614, 4028: 725, 2033: 838, 2238: 950, 1245: 1062, 2105: 61, 2309: 171, 2412: 281, 3515: 391, 
        1220: 502, 2924: 615, 829: 726, 2133: 839, 2338: 951, 1345: 1063, 2205: 62, 2409: 172, 2512: 282, 
        3615: 392, 1320: 503, 3024: 616, 929: 727, 2233: 840, 2438: 952, 1445: 1064, 2305: 63, 2509: 173, 
        2612: 283, 3715: 393, 1420: 504, 3124: 617, 1029: 728, 2333: 841, 2538: 953, 1545: 1065, 2405: 64, 
        2609: 174, 2712: 284, 3815: 394, 1520: 505, 4224: 618, 1129: 729, 2433: 842, 2638: 954, 1645: 1066, 
        2505: 65, 2709: 175, 2812: 285, 1116: 395, 1620: 506, 4324: 619, 1229: 730, 2533: 843, 2738: 955, 
        1745: 1067, 2605: 66, 2809: 176, 2912: 286, 1216: 396, 1720: 507, 925: 620, 1329: 731, 2633: 844, 
        2838: 956, 1146: 1068, 206: 67, 2909: 177, 3012: 287, 1316: 397, 1820: 508, 1025: 621, 1429: 732, 
        2733: 845, 839: 958, 1246: 1069, 306: 68, 3009: 178, 3112: 288, 1416: 398, 1920: 509, 1125: 622, 
        1529: 733, 2833: 846, 939: 959, 1346: 1070, 406: 69, 3109: 179, 3212: 289, 1516: 399, 2020: 510, 
        1225: 623, 1629: 734, 2933: 847, 1039: 960, 1446: 1071, 506: 70, 3209: 180, 3312: 290, 1616: 400, 
        2120: 511, 1325: 624, 1729: 735, 3033: 848, 1139: 961, 1546: 1072, 606: 71, 3309: 181, 3412: 291, 
        1716: 401, 2220: 512, 1425: 625, 1829: 736, 834: 851, 1239: 962, 1247: 1073, 706: 72, 3409: 182, 
        3512: 292, 1816: 402, 2320: 513, 1525: 626, 1929: 737, 934: 852, 1339: 963, 1347: 1074, 806: 73, 
        3509: 183, 3612: 293, 1916: 403, 2420: 514, 1625: 627, 2029: 738, 1034: 853, 1439: 964, 1447: 1075, 
        906: 74, 310: 184, 3712: 294, 2016: 404, 2520: 515, 1725: 628, 2129: 739, 1134: 854, 1539: 965, 
        1248: 1076, 1006: 75, 410: 185, 3812: 295, 2116: 405, 2620: 516, 1825: 629, 2229: 740, 1234: 855, 
        1639: 966, 1348: 1077, 1106: 76, 510: 186, 3912: 296, 2216: 406, 2720: 517, 1925: 630, 2329: 741, 
        1334: 856, 1739: 967, 1448: 1078, 1206: 77, 610: 187, 4012: 297, 2316: 407, 2820: 518, 2025: 631, 
        2429: 742, 1434: 857, 1839: 968, 1306: 78, 710: 188, 313: 298, 2416: 408, 2920: 519, 2125: 632, 
        2529: 743, 1534: 858, 1939: 969, 1406: 79, 810: 189, 413: 299, 2516: 409, 3020: 520, 2225: 633, 
        2629: 744, 1634: 859, 2039: 970, 1506: 80, 910: 190, 513: 300, 2616: 410, 3120: 521, 2325: 634, 
        2729: 745, 1734: 860, 2139: 971, 1606: 81, 1010: 191, 613: 301, 2716: 411, 3220: 522, 2425: 635,
        2829: 746, 1834: 861, 2239: 972, 1706: 82, 1110: 192, 713: 302, 2816: 412, 3320: 523, 2525: 636, 
        2929: 747, 1934: 862, 2339: 973, 1806: 83, 1210: 193, 813: 303, 2916: 413, 1021: 525, 2625: 637, 
        3929: 748, 2034: 863, 2439: 974, 1906: 84, 1310: 194, 913: 304, 3016: 414, 1121: 526, 2725: 638, 
        930: 750, 2134: 864, 2539: 975, 2006: 85, 1410: 195, 1013: 305, 3116: 415, 1221: 527, 2825: 639, 
        1030: 751, 2234: 865, 2639: 976, 2106: 86, 1510: 196, 1113: 306, 3216: 416, 1321: 528, 2925: 640,
        1130: 752, 2334: 866, 2739: 977, 2206: 87, 1610: 197, 1213: 307, 3316: 417, 1421: 529, 3025: 641, 
        1230: 753, 2434: 867, 2839: 978, 2306: 88, 1710: 198, 1313: 308, 3416: 418, 1521: 530, 3225: 642, 
        1330: 754, 2534: 868, 840: 980, 2406: 89, 1810: 199, 1413: 309, 3516: 419, 1621: 531, 3925: 644, 
        1430: 755, 2634: 869, 940: 981, 2506: 90, 1910: 200, 1513: 310, 3616: 420, 1721: 532, 4025: 645, 
        1530: 756, 2734: 870, 1040: 982, 2606: 91, 2010: 201, 1613: 311, 3716: 421, 1821: 533, 4225: 646, 
        1630: 757, 2834: 871, 1140: 983, 207: 92, 2110: 202, 1713: 312, 1017: 422, 1921: 534, 4325: 647, 
        1730: 758, 2934: 872, 1240: 984, 307: 93, 2210: 203, 1813: 313, 1117: 423, 2021: 535, 926: 648, 
        1830: 759, 835: 873, 1340: 985, 407: 94, 2310: 204, 1913: 314, 1217: 424, 2121: 536, 1026: 649, 
        1930: 760, 935: 874, 1440: 986, 507: 95, 2410: 205, 2013: 315, 1317: 425, 2221: 537, 1126: 650, 
        2030: 761, 1035: 875, 1540: 987, 607: 96, 2510: 206, 2113: 316, 1417: 426, 2321: 538, 1226: 651, 
        2130: 762, 1135: 876, 1640: 988, 707: 97, 2610: 207, 2213: 317, 1517: 427, 2421: 539, 1326: 652, 
        2230: 763, 1235: 877, 1740: 989, 807: 98, 2710: 208, 2313: 318, 1617: 428, 2521: 540, 1426: 653,
        2330: 764, 1335: 878, 1840: 990, 907: 99, 2810: 209, 2413: 319, 1717: 429, 2621: 541, 1526: 654, 
        2430: 765, 1435: 879, 1940: 991, 1007: 100, 2910: 210, 2513: 320, 1817: 430, 2721: 542, 1626: 655, 
        2530: 766, 1535: 880, 2040: 992, 1107: 101, 3010: 211, 2613: 321, 1917: 431, 2821: 543, 1726: 656, 
        2630: 767, 1635: 881, 2140: 993, 1207: 102, 3110: 212, 2713: 322, 2017: 432, 2921: 544, 1826: 657, 
        2730: 768, 1735: 882, 2240: 994, 1307: 103, 3210: 213, 2813: 323, 2117: 433, 3021: 545, 1926: 658, 
        2830: 769, 1835: 883, 2340: 995, 1407: 104, 3310: 214, 2913: 324, 2217: 434, 3121: 546, 2026: 659, 
        2930: 770, 1935: 884, 2440: 996, 1507: 105, 3410: 215, 3013: 325, 2317: 435, 3221: 547, 2126: 660, 
        3030: 771, 2035: 885, 2540: 997, 1607: 106, 3510: 216, 3113: 326, 2417: 436, 1022: 550, 2226: 661, 
        3430: 772, 2135: 886, 841: 998, 1707: 107, 3610: 217, 3213: 327, 2517: 437, 1122: 551, 2326: 662, 
        3530: 773, 2235: 887, 941: 999, 1807: 108, 3710: 218, 3313: 328, 2617: 438, 1222: 552, 2426: 663, 
        931: 775, 2335: 888, 1041: 1000, 1907: 109, 3810: 219, 3413: 329, 2717: 439, 1322: 553, 2526: 664, 
        1031: 776, 2435: 889, 1141: 1001, 2007: 110, 3910: 220, 3513: 330, 2817: 440, 1422: 554, 2626: 665, 
        1131: 777, 2535: 890, 1241: 1002, 2107: 111, 4010: 221, 3613: 331, 2917: 441, 1522: 555, 2726: 666, 
        1231: 778, 2635: 891, 1341: 1003, 2207: 112, 311: 222, 3713: 332, 3017: 442, 1622: 556, 2826: 667, 
        1331: 779, 2735: 892, 1441: 1004, 2307: 113, 411: 223, 3813: 333, 3117: 443, 1722: 557, 2926: 668, 
        1431: 780, 2835: 893, 1541: 1005, 2407: 114, 511: 224, 3913: 334, 3217: 444, 1822: 558, 3026: 669, 
        1531: 781, 2935: 894, 1641: 1006, 2507: 115, 611: 225, 4013: 335, 3317: 445, 1922: 559, 3826: 670, 
        1631: 782, 936: 895, 1741: 1007, 2607: 116, 711: 226, 614: 336, 3417: 446, 2022: 560, 3926: 671, 
        1731: 783, 1036: 896, 1841: 1008
    }


    def dms_to_dd(deg, minutes=0, seconds=0,direction='W'):
        """converts from degree, minutes, seconds, direction to float (standard) degrees
        
        Arguments:
            deg {float} -- degrees
        
        Keyword Arguments:
            minutes {float} -- minutes (default: {0})
            seconds {float} -- seconds (default: {0})
            direction {string} -- N,S,W,E (default: {'W'})
        
        Returns:
            float -- the value in foat format
        """

        ret = (float(deg) + float(minutes)/60 + float(seconds)/(60*60)) * (-1 if direction in ['W', 'S'] else 1)
        return ret

    def dms_to_dd_s(dms):
        """get a degree, minutes seconds string, and return the float (standard) degrees

        Arguments:
            dms {string} -- the string. Like 43º 46' 7.01" N
        
        Returns:
            float -- The float representation
        """
        deg, minutes, seconds, direction = re.split('[^\d\w\.]+', dms)
        deg = re.sub('[°º]','',deg)
        #print(deg,minutes,seconds,direction)
        ret = (float(deg) + float(minutes)/60 + float(seconds)/(60*60)) * (-1 if direction in ['W', 'S'] else 1)
        return ret

    def dd_to_dms(deg, mode='lat'):
        """convert from float to degree, minutes, seconds
        
        Arguments:
            deg {float} -- the value
        
        Keyword Arguments:
            mode {string} -- lat-itude or lon-gitude. For N/S or W/E (default: {'lat'})
        
        Returns:
            tuple (degrees, minutes, seconds, direction) -- the value converted.
        """

        sign = 1 if deg > 0 else -1
        d = int(deg)
        md = abs(deg - d) * 60
        m = int(md)
        sd = (md - m) * 60

        if mode.lower() == 'lat':
            direction = 'N' if sign > 0 else 'S'
        else:
            direction = 'E' if sign > 0 else 'W'

        return (abs(d), m, sd, direction)

    def dd_to_dms_s(deg, mode='lat'):
        """convert from float to degree, minutes, seconds, returns a string
        
        Arguments:
            deg {float} -- the value
        
        Keyword Arguments:
            mode {string} -- lat-itude or lon-gitude. For N/S or W/E (default: {'lat'})
        
        Returns:
            string -- the value converted.
        """
        
        s = '''%dº %d' %3.2f" %s''' % MTN.dd_to_dms(deg, mode)
        return s



    def where(lon, lat):
        """calculates the MTN sheet for the given lon, lat in float format
        NOTE:
        for now, only works properly for MTN50 sheets, due I didn't
        do the calc for the MTN25 (4 subdivisions) and MTN10 (8 subdivisions)
        
        Arguments:
            lon {float} -- longitude
            lat {float} -- latitude
        
        Returns:
            dict -- dict with the sheets, and the CC (col) FF (fila) code
        """

        col = lon - MTN.origin.lon
        row = MTN.origin.lat - lat

        MTN50 = "%2d%2d" % (int( col * 3) + 1, int(row * 6) + 1)
        MTN25 = "%2d%2d" % (int( col * 6) + 1, int(row * 12) + 1)
        MTN10 = "%3d%03d" % (int( col * 12) + 1, int(row * 24) + 1)

        MTN50,MTN25,MTN10 = map(lambda x: int(x), (MTN50,MTN25, MTN10))

        return { 'MTN50': [(MTN50, MTN.mtn_from_ccff[MTN50])], 
                 'MTN25': [(MTN25, MTN.mtn_from_ccff[MTN50])],
                 'MTN10': [(MTN10, MTN.mtn_from_ccff[MTN50])] }

    def to_MTN(*args, **kwargs):
        """wrapper to call the where function, supporting lat, lon, and
        bounding box calls:

            to_MTN(lon,lat)
            to_MTN(lon=-4.33,lat=40.44)
            to_MTN(top=40.26354661,left=-5.17882580,bottom=39.255413,right=-5.169102)

        Raises:
            TypeError: if you passes keyword args, but not top,left,right,bottom

        Returns:
            [dict] -- the sheet(s) for the lat,lon or bounding box
                        1 point = 1 sheet (MTN50)
                        lat, lon = {'MTN50': [(2022, 560)], 
                                    'MTN25': [(3944, 560)], 
                                    'MTN10': [(77088, 560)]
                                    }
                        bounding box: up to 4 sheets (MTN50)
                        bbox = { 'MTN50': [[(1523, 578)], [(1529, 733)]], 
                                 'MTN25': [[(2945, 578)], [(2957, 733)]], 
                                 'MTN10': [[(57090, 578)], [(57114, 733)]]
                                 }
        """

        if len(kwargs) == 0 and len(args) == 2:
            lon = args[0]
            lat = args[1]
            return MTN.where(lon, lat)

        elif len(kwargs) == 2:
            if "lon" in kwargs.keys(): lon= kwargs["lon"]
            if "lat" in kwargs.keys(): lat= kwargs["lat"]
            return MTN.where(lon, lat)

        for i in [ "top", "bottom", "left", "right" ]:
            if not i in kwargs.keys():
                raise TypeError("Bad params")
    
        # need to check every single corner
        top = kwargs["top"]
        left = kwargs["left"]
        bottom = kwargs["bottom"]
        right = kwargs["right"]

        TL = MTN.where(left, top)
        BL = MTN.where(left, bottom)
        TR = MTN.where(right, top)
        BR = MTN.where(right, bottom)

        ret = { 'MTN50': {}, 'MTN25': {}, 'MTN10': {} }

        for corner in [TL,BL,TR,BR]:
            for mtn in ['MTN50', 'MTN25', 'MTN10']:
                if corner[mtn][0] not in ret[mtn].keys():
                    ret[mtn][corner[mtn][0]] = corner[mtn]

        # build the standard return

        for mtn in ['MTN50', 'MTN25', 'MTN10']:
            ret[mtn] = list(ret[mtn].values())
        
        return ret



if __name__ == "__main__":
    # lat = '''43º 46' 7.01" N''' # 43.768613888888886
    # lat = '''8º 0' 2.86" W''' # -8.000794444444445

    # print(MTN.dms_to_dd_s(lat))
    # print(MTN.dd_to_dms(-8.000794444444445,mode='lon'))
    # print(MTN.dd_to_dms_s(-8.000794444444445,mode='lon'))

    # print(MTN.dms_to_dd_s(MTN.origin_dms[0]))
    # print(MTN.dms_to_dd_s(MTN.origin_dms[1]))

    # print(MTN.where(-3.485088888888889,40.37361111111111))
    # #print(MTN.where(float(sys.argv[1]),float(sys.argv[2])))

    # print(MTN.to_MTN(-3.48,40.37))
    # print(MTN.to_MTN(lon=-3.48,lat=40.37))
    # print(MTN.to_MTN(top=40.263546616792624,left=-5.1788258082264305,bottom=39.25541390947118,right=-5.169102583586535))


    parser = argparse.ArgumentParser(usage=None,description="MTN sheet finder. Looks for the sheet")

    maingroup = parser.add_argument_group()
    maingroup.add_argument("-v", "--verbose", help="Show data about file and processing", action="count")
    exgroup = parser.add_argument_group(title='Json or Coords')
    group = exgroup.add_mutually_exclusive_group(required=True)
    group.add_argument('-j','--json',nargs=1,help='''{"top":40.4,"left":-4.32,"bottom":40.36,"right":-4.2}''')
    group.add_argument('-c','--coords',nargs=2, metavar=('lon','lat'), type=float)
    args = parser.parse_args()


    if args.coords:
        print(MTN.to_MTN(lon=args.coords[0],lat=args.coords[1]))

    else:
        bounds = Bounds(jsonstr=args.json[0])
        print(MTN.to_MTN(top=bounds.top,left=bounds.left,bottom=bounds.bottom,right=bounds.right))

